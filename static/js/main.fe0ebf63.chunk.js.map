{"version":3,"sources":["services/fetchAPI.js","services/fetchFilms.js","helpers/applyFilters.js","context/index.js","components/SearchInput.jsx","components/Table.jsx","components/FiltersSection.jsx","App.js","index.js"],"names":["fetchPlanets","a","fetch","response","data","json","console","error","message","fetchFilm","url","applyInputFilter","searchInput","results","filter","planet","name","toLowerCase","includes","applyValueFilters","numericFilter","comparison","column","value","Number","PlanetContext","createContext","PlanetProvider","children","useState","setData","planetsToRender","setPlanetsToRender","getPlanets","filterResult","getFilmsTitles","planets","Promise","all","map","films","film","result","title","useEffect","Provider","INICIAL_STATE","SearchInput","filterByName","setFilterByName","useContext","className","type","data-testid","placeholder","onChange","e","handleSearchInputChange","target","Table","key","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","created","edited","COLUMN_OPTIONS","INICIAL_NUMERIC_FILTER","FiltersSection","setNumericFilter","columnOptions","setcolumnOptions","activeFilter","setActiveFilter","onNumericFilterChange","columnName","onClick","length","filterResults","updatedOptions","option","updateColumnInicialState","updateColumnOptions","filterToErase","filters","onEraseFilterClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe0ebf63.chunk.js","sourcesContent":["const fetchPlanets = async () => {\n  const URL = 'https://swapi-trybe.herokuapp.com/api/planets/';\n  try {\n    const response = await fetch(URL);\n    const data = response.json();\n    return data;\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport default fetchPlanets;\n","const fetchFilm = async (url) => {\n  try {\n    const response = await fetch(url);\n    const data = response.json();\n    return data;\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport default fetchFilm;","export const applyInputFilter = (data, searchInput) => {\n  const { results } = data; // results é onde estão os planetas na resposta da API.\n\n  const filterResult = results.filter((planet) => planet.name.toLowerCase()\n    .includes(searchInput.toLowerCase()));\n  return filterResult;\n};\n\nexport const applyValueFilters = (data, numericFilter) => {\n  const { comparison, column, value } = numericFilter;\n  // const { results } = data;\n  switch (comparison) {\n  case 'maior que':\n    return data.filter((planet) => Number(planet[column]) > Number(value));\n    // Usa Number() pois os valores vem do DOM como string causando erro na comparação.\n\n  case 'menor que':\n    return data.filter((planet) => Number(planet[column]) < Number(value));\n\n  case 'igual a':\n    return data.filter((planet) => Number(planet[column]) === Number(value));\n  default:\n    return 'Operador Inválido';\n  }\n};\n","import React, { createContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport fetchPlanets from '../services/fetchAPI';\nimport fetchFilm from '../services/fetchFilms';\nimport { applyInputFilter } from '../helpers/applyFilters';\n\nexport const PlanetContext = createContext();\n\nexport const PlanetProvider = ({ children }) => {\n  const [data, setData] = useState({}); // Cria um estado para armazenas o retorno da API e outro para o resultado dos filtros\n  const [planetsToRender, setPlanetsToRender] = useState([]); // useState recebe valor inicial do estado\n\n  const getPlanets = async () => {\n    const response = await fetchPlanets();\n    const filterResult = applyInputFilter(response, ''); // \"applyInputFilter\" recebe o retorno da API mais o valor a ser filtrado\n    setData(response);\n    getFilmsTitles(filterResult);\n  };\n\n  const getFilmsTitles = async (planets) => {\n    const result = await Promise.all(planets.map( async (planet) => {\n      const films = await Promise.all(planet.films.map( async (film) => {\n        const result = await fetchFilm(film);\n        return result.title;\n      }))\n      return { ...planet, films };\n    }))\n    setPlanetsToRender(result);\n  }\n\n  useEffect(() => { // equivalente ao \"componentDidUpdate\", não aceita funções assincronas por isso chama a \"getPlanets\"\n    getPlanets();\n  }, []); // * o lint pede um array, pesquisar o porque depois *\n\n  const value = { // guarda todos os valores que serão passados aos componentes filhos, podem ser os estados ou funções\n    data,\n    planetsToRender,\n    setPlanetsToRender,\n  };\n\n  return (\n    <PlanetContext.Provider value={ value }>\n      { children }\n    </PlanetContext.Provider>\n  );\n};\n\nPlanetProvider.propTypes = {\n  children: PropTypes.instanceOf(Object).isRequired, // conferir essa validação depois...\n};\n","import React, { useContext, useState } from 'react';\nimport { PlanetContext } from '../context';\nimport { applyInputFilter } from '../helpers/applyFilters';\n\nconst INICIAL_STATE = {\n  name: '',\n};\n\nconst SearchInput = () => {\n  // useState cria o estado o seu modificador 'setEstado'\n  // useContext tras as informações do \"estado global\" que estão no contexto\n\n  const [filterByName, setFilterByName] = useState(INICIAL_STATE); // estado do \"filterByNameInput\"\n  const { setPlanetsToRender, data } = useContext(PlanetContext); // valores do contexto\n\n  const handleSearchInputChange = (value) => {\n    setFilterByName({ ...filterByName, ...value });\n    const filterResult = applyInputFilter(data, value.name);\n    setPlanetsToRender(filterResult);\n  };\n\n  return (\n    <input\n      className='search_input'\n      type=\"text\"\n      data-testid=\"name-filter\"\n      placeholder=\"Search\"\n      value={ filterByName.name }\n      onChange={ (e) => handleSearchInputChange({ name: e.target.value }) }\n    />\n  );\n};\n\nexport default SearchInput;\n","import React, { useContext } from 'react';\nimport { PlanetContext } from '../context';\nimport fetchFilm from '../services/fetchFilms';\n\nconst Table = () => {\n  const { data: { results }, planetsToRender } = useContext(PlanetContext);\n\n  return (\n    results\n      ? (\n        <table className='table'>\n          <thead className='table_head'>\n            <tr>\n              <th>Name</th>\n              <th>Rotation Period</th>\n              <th>Orbital Period</th>\n              <th>Diameter</th>\n              <th>Climate</th>\n              <th>Gravity</th>\n              <th>Terrain</th>\n              <th>Surface Water</th>\n              <th>Population</th>\n              <th>Films</th>\n              <th>Created</th>\n              <th>Edited</th>\n              <th>URL</th>\n            </tr>\n          </thead>\n          <tbody className='table_body'>\n            {\n              planetsToRender.map((planet) => (\n                <tr\n                  key={ planet.name }\n                >\n                  <td className='planet_name'>{ planet.name }</td>\n                  <td>{ planet.rotation_period }</td>\n                  <td>{ planet.orbital_period }</td>\n                  <td>{ planet.diameter }</td>\n                  <td>{ planet.climate }</td>\n                  <td>{ planet.gravity }</td>\n                  <td>{ planet.terrain }</td>\n                  <td>{ planet.surface_water }</td>\n                  <td>{ planet.population }</td>\n                  <td>{ planet.films }</td>\n                  <td>{ planet.created }</td>\n                  <td>{ planet.edited }</td>\n                  <td>{ planet.url }</td>\n                </tr>\n              ))\n            }\n          </tbody>\n        </table>\n      )\n      : <p>Loading...</p>\n  );\n};\n\nexport default Table;\n","import React, { useContext, useState } from 'react';\nimport { PlanetContext } from '../context';\nimport { applyValueFilters } from '../helpers/applyFilters';\n\nconst COLUMN_OPTIONS = [\n  'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\n\nconst INICIAL_NUMERIC_FILTER = {\n  column: 'population',\n  comparison: 'maior que',\n  value: 0,\n};\n\nconst FiltersSection = () => {\n  const [numericFilter, setNumericFilter] = useState(INICIAL_NUMERIC_FILTER);\n  const [columnOptions, setcolumnOptions] = useState(COLUMN_OPTIONS);\n  const [activeFilter, setActiveFilter] = useState([]);\n  const { setPlanetsToRender, data, planetsToRender } = useContext(PlanetContext);\n\n  const onNumericFilterChange = (value) => {\n    setNumericFilter({ ...numericFilter, ...value });\n  };\n\n  const updateColumnOptions = () => {\n    const updatedOptions = columnOptions.filter(\n      (option) => option !== numericFilter.column,\n    );\n\n    setcolumnOptions(updatedOptions);\n    const updateColumnInicialState = { column: updatedOptions[0] };\n    setNumericFilter({ ...numericFilter, ...updateColumnInicialState });\n  };\n\n  const onButtonFilterClick = () => {\n    // const { column, comparison, value } = numericFilter;\n    // const newFilter = `${column} | ${comparison} | ${value}`;\n    if (activeFilter.length > 0) {\n      const filterResults = applyValueFilters(planetsToRender, numericFilter);\n      setActiveFilter([...activeFilter, numericFilter]);\n      setPlanetsToRender(filterResults);\n    } else {\n      const filterResults = applyValueFilters(data.results, numericFilter); // passa 'data.results' pois 'applyValueFilters()' espera um array\n      setActiveFilter([...activeFilter, numericFilter]);\n      setPlanetsToRender(filterResults);\n    }\n    updateColumnOptions();\n  };\n\n  const onEraseFilterClick = (filterToErase) => {\n    const filters = activeFilter.filter((filter) => filter !== filterToErase);\n    setActiveFilter(filters);\n  };\n\n  return (\n  // a função (e) => onNumericFilterChange({ column: e.target.value }) passada no onChange dos inputs\n  // juntamente com a onButtonFilterClick passada no onClick do botão.\n  // foi pega consultando o repositorio da Marina Fischer. Eu havia feito de outra forma bem mais verbosa\n  // que funcionava mas não passava nos testes, então encontrei essa forma bem mais simples e sofisticada.\n\n    <section className='filter_section'>\n      <select className='filter_select'\n        data-testid=\"column-filter\"\n        onChange={ (e) => onNumericFilterChange({ column: e.target.value }) }\n      >\n\n        {\n          columnOptions.map(\n            (columnName) => (\n              <option key={ columnName } value={ columnName }>{ columnName }</option>),\n          )\n        }\n\n      </select>\n\n      <select\n        className='filter_select'\n        data-testid=\"comparison-filter\"\n        onChange={ (e) => onNumericFilterChange({ comparison: e.target.value }) }\n      >\n        <option value=\"maior que\">maior que</option>\n        <option value=\"menor que\">menor que</option>\n        <option value=\"igual a\">igual a</option>\n      </select>\n\n      <input\n        className='filter_input'\n        data-testid=\"value-filter\"\n        type=\"number\"\n        value={ numericFilter.value }\n        onChange={ (e) => onNumericFilterChange({ value: e.target.value }) }\n      />\n      <button\n        className='filter_button'\n        data-testid=\"button-filter\"\n        type=\"button\"\n        onClick={ onButtonFilterClick }\n      >\n        Apply Filter\n      </button>\n\n      {\n        activeFilter.map((filter) => (\n          <div key={ filter.column }>\n            <span>{`${filter.column} | ${filter.comparison} | ${filter.value}`}</span>\n            <button\n              type=\"button\"\n              onClick={ () => onEraseFilterClick(filter) }\n            >\n              X\n            </button>\n          </div>\n        ))\n      }\n\n    </section>\n\n  );\n};\n\nexport default FiltersSection;\n","import React from 'react';\nimport { PlanetProvider } from './context/index';\nimport SearchInput from './components/SearchInput';\nimport Table from './components/Table';\nimport FiltersSection from './components/FiltersSection';\nimport './index.css';\n\nfunction App() {\n  return (\n    <PlanetProvider>\n      <header>\n        <h1>Projeto StarWars Planets</h1>\n      </header>\n      <div className='filter_div'>\n      <SearchInput />\n      <FiltersSection />\n      </div>\n      <Table />\n    </PlanetProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}